{"remainingRequest":"C:\\Users\\Lenovo\\Desktop\\demos\\iphone\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Lenovo\\Desktop\\demos\\iphone\\src\\components\\ControlUnit.vue?vue&type=style&index=0&id=5306d201&lang=scss&scoped=true&","dependencies":[{"path":"C:\\Users\\Lenovo\\Desktop\\demos\\iphone\\src\\components\\ControlUnit.vue","mtime":1587960652295},{"path":"C:\\Users\\Lenovo\\Desktop\\demos\\iphone\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lenovo\\Desktop\\demos\\iphone\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Lenovo\\Desktop\\demos\\iphone\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Lenovo\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lenovo\\Desktop\\demos\\iphone\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Lenovo\\Desktop\\demos\\iphone\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi57DQogIGNvbG9yOiByZ2IoMzMsIDI0OCwgOTcpDQp9DQo="},{"version":3,"sources":["ControlUnit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyGA;AACA;AACA","file":"ControlUnit.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"control-unit-wrap\">\r\n    <Button icon=\"ios-arrow-forward\" v-if=\"isCollapsed\" @click=\"handleChangeCollapse\"></Button>  \r\n    <ButtonGroup vertical v-else>\r\n        <Button icon=\"ios-arrow-down\" @click=\"handleChangeCollapse\"></Button>\r\n        <div\r\n            @mousedown=\"longPressStart\"\r\n            @mouseup=\"longPressEnd\"\r\n        >\r\n          <Button icon=\"md-power\"></Button>\r\n        </div>\r\n        \r\n        <Button icon=\"md-add\"></Button>\r\n        <Button icon=\"md-remove\"></Button>\r\n    </ButtonGroup>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters, mapMutations} from 'vuex'\r\n\r\nexport default {\r\n  name: 'ControlUnit',\r\n  props: {\r\n    isPowerOffComfirmed: Boolean\r\n  },\r\n  mounted() {\r\n      \r\n  },\r\n  data() {\r\n      return {\r\n          //true: control unit is collapsed\r\n          isCollapsed: true,\r\n          //start time of a long press\r\n          startTime: 0\r\n      }\r\n  },\r\n  methods: {\r\n      //change the value of isCollapsed\r\n      handleChangeCollapse() {\r\n          this.isCollapsed = !this.isCollapsed;\r\n      },\r\n      //change the value of isLocked\r\n      changeLockState() {\r\n          //console.log(\"change lock state\")\r\n          if (this.isLocked) {\r\n              //the phone is locked\r\n              //this.$emit('showUnlockModal');\r\n              if (this.isUnlockRequested) {\r\n                 //show black screen\r\n                 this.setIsUnlockRequested(false);\r\n              }\r\n              else {\r\n                  //request to unlock\r\n                  this.setIsUnlockRequested(true);\r\n              }              \r\n          }\r\n          else {\r\n              //lock the phone \r\n              this.$router.push('/phone/locked');\r\n          }\r\n      },\r\n      //longPressStart\r\n      longPressStart() {\r\n          this.startTime = Date.now();\r\n          //console.log(\"start\")\r\n      },\r\n      //longPressEnd\r\n      longPressEnd() {\r\n          const endTime = Date.now();\r\n          if (endTime - this.startTime < 2000) {\r\n              //time is not long enough\r\n              this.changeLockState();\r\n              return;\r\n          }\r\n          else {\r\n              if (!this.isPoweredOff) {\r\n                  //if phone is on, send request to power off\r\n                  this.$emit(\"showPowerOffModal\");\r\n              }\r\n              else {\r\n                  //phone is powered off, turn it on\r\n                  this.setPoweroffState(false);\r\n                  this.$emit(\"showPowerOnAnimation\");\r\n              }\r\n          }\r\n      },\r\n      ...mapMutations({\r\n          setLockState: 'LOCK_STATE',\r\n          setPoweroffState: 'POWER_OFF_STATE',\r\n          setIsUnlockRequested: 'SET_IS_UNLOCK_REQUESTED'\r\n      })\r\n  },\r\n  computed: {\r\n      ...mapGetters([\r\n        'isPoweredOff',\r\n        'isLocked',\r\n        'isUnlockRequested'\r\n      ])\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style lang=\"scss\" scoped>\r\n.{\r\n  color: rgb(33, 248, 97)\r\n}\r\n</style>\r\n"]}]}